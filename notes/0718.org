#+TITLE: Maximum Length of Repeated Subarray

* [[https://leetcode.com/problems/maximum-length-of-repeated-subarray/][718. Maximum Length of Repeated Subarray]]

Given two arrays, what is the length of the *longest subarry* common to both of them


Finding common subarrays in two sequences is almost always about a matrix (or a suffix / prefix tree or array) and finding diagonal lines of matches:

Using the provided example:

#+BEGIN_SRC
A: [1,2,3,2,1]
B: [3,2,1,4,7]
#+END_SRC

|   |   1 |   2 |   3 |   2 |   1 |
|---+-----+-----+-----+-----+-----|
| 3 |   0 |   0 | *1* |   0 |   0 |
| 2 |   0 | *1* |   0 | *1* |   0 |
| 1 | *1* |   0 |   0 |   0 | *1* |
| 4 |   0 |   0 |   0 |   0 |   0 |
| 7 |   0 |   0 |   0 |   0 |   0 |

And then one of our own:
#+BEGIN_SRC
A: [10,1,4,7,3,3,4,7,1,2,3,4,6]
B: [2,4,10,2,4,7,3,3,4,7,3,1,4,6]
#+END_SRC

|    |  10 |   1 |   4 |   7 |   3 |   3 |   4 |   7 |   1 |   2 |   3 |   4 |   6 |
|----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
|  2 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 | *1* |   0 |   0 |   0 |
|  4 |   0 |   0 | *1* |   0 |   0 |   0 | *1* |   0 |   0 |   0 |   0 | *1* |   0 |
| 10 | *1* |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |
|  2 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 | *1* |   0 |   0 |   0 |
|  4 |   0 |   0 | *1* |   0 |   0 |   0 | *1* |   0 |   0 |   0 |   0 | *1* |   0 |
|  7 |   0 |   0 |   0 | *1* |   0 |   0 |   0 | *1* |   0 |   0 |   0 |   0 |   0 |
|  3 |   0 |   0 |   0 |   0 | *1* | *1* |   0 |   0 |   0 |   0 | *1* |   0 |   0 |
|  3 |   0 |   0 |   0 |   0 | *1* | *1* |   0 |   0 |   0 |   0 | *1* |   0 |   0 |
|  4 |   0 |   0 | *1* |   0 |   0 |   0 | *1* |   0 |   0 |   0 |   0 | *1* |   0 |
|  7 |   0 |   0 |   0 | *1* |   0 |   0 |   0 | *1* |   0 |   0 |   0 |   0 |   0 |
|  3 |   0 |   0 |   0 |   0 | *1* | *1* |   0 |   0 |   0 |   0 | *1* |   0 |   0 |
|  1 |   0 | *1* |   0 |   0 |   0 |   0 |   0 |   0 | *1* |   0 |   0 |   0 |   0 |
|  4 |   0 |   0 | *1* |   0 |   0 |   0 | *1* |   0 |   0 |   0 |   0 | *1* |   0 |
|  6 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 |   0 | *1* |

A way to improve on this would be to /count as we construct/ the matrix. If you noticed how you were filling out the matrix: left-to-right, top-to-bottom,
its as if we're progressively matching prefixes of =B= against =A=, dynamically maintaing a count would mean the same as incrementing a cell if its predecessor (top-left) is set.

So we have:
#+BEGIN_SRC
MaxCommonLength[i][j] = MaxCommonLength[i - 1][j - 1] + 1 if A[i] == B[j]
MaxCommonLength[i][j] = 0 if A[i] != B[j]
#+END_SRC

That is /ALL/ that the recurrence encodes, in fact this group of common subarray problems is best understood through the binary matrix approach.

We don't need to stick to this implementation, its probably faster to allocate a bitset and use that.
