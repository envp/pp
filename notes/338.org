#+TITLE: Counting Set Bits in a number

* [[https://leetcode.com/problems/counting-bits/][Counting Bits]]

Important terms here:
 - [[https://en.wikipedia.org/wiki/MISD][MISD]]
 - [[https://en.wikipedia.org/wiki/SIMD][SIMD]]
 - [[https://stackoverflow.com/a/34410357/2857070][Beautiful SO answer to generate good code for this]]

This is my foray into dynamic programming, trying to understand how to spot recurrence relations and identify where to use DP to its maximum potential.

There are faster methods than dynamic programming for this, but those reqiure using either compiler builtins, or hardware instructions. The most interesting
of those is using =std::bitset<N>= (see SO link).

** How to Dynamic this Program
One of the most important insights here is that the bits at various positions
in numbers repeat with a period, that is a power of 2. That should prompt us to look for something that relates a number to something before itself.

Tabulating the bits of each number, we have:

| Decimal  | Binary | Set Bit Count |
|----------+--------+---------------|
|0         |0       |0              |
|1         |1       |1              |
|2         |10      |1              |
|3         |11      |2              |
|4         |100     |1              |
|5         |101     |2              |
|6         |110     |2              |
|7         |111     |3              |
|8         |1000    |1              |

Now, if we stare long enough, we notice that every odd number is preceded by an
even number, always has 1 more number of set bits than the even number. This is
always going to work since the jump from even to next odd is setting the LSB of
the even number.

Okay so now we know that =SETCOUNT(ODD) => SETCOUNT(ODD - 1) + 1=
How do the evens relate to an odd number before them? Well, every even number is
some power of 2 multiplied by an odd number (as noticed by right shifting the bits) since we right shift all the zeros off the number, this doesn't change the count of set bits.

These two items leave us with the recurrence:
- ~SETCOUNT(ODD) => SETCOUNT(ODD - 1) + 1~
- ~SETCOUNT(EVEN) => SETCOUNT(N_ODD), where EVEN = (2^k) * N_ODD~

If the memo table is built bottom up, the even lookup turns into a constant time operation, as we only need to know the count for =N/2= to find out what the value for =N= would be.

** Random afterthoughts
Clearly, the naive way to do this would be to count the number of set bits for each number in loop and that turns out to have an amortized cost of =O(n * log (n))=. This can obviously improved using compiler builtins like =__builtin_popcount(unsigned int)= for =gcc= and =clang=.

Those complexities aren't simply /bad/, because the code used to compute this is so simple that I would assume that compiler optimizations would /REALLY/ kick in, especially stuff like SIMD, and unrolling, and running the loop on multiple threads.

TODO: Check the assembly produced for the following code block in GCC/Clang

[[https://godbolt.org/z/SR4Qar][ALL HAIL GODBOLT]]

#+BEGIN_SRC cxx
#include <vector>

// 32 ops per iteration, but each loop iteration is very MISD friendly
// Each iteration is fully independant of the last so this parallelizes well
// with SIMD.
std::vector<int> countBitsNaive(int num) {
   #define BIT(n, k) (((n) & (1 << (k) )) >> (k))

   std::vector<int> counts{num + 1, 0};

  for (size_t i = 0; i <= num; ++i) {
    for (size_t k = 0; k < sizeof(num) * 8; ++k) {
      counts[i] += BIT(num, k);
    }
  }

  return counts;
}
#+END_SRC

This can be optimized via =__builtin_popcount= on GCC/Clang, and something equivalent on your favourite compiler (if this isn't an available instruction, then there is usually something like =__builtin_clz= that can be used)

#+BEGIN_SRC cxx
#include <vector>

#if !defined(__GNUC__) && !defined(__clang__)
static_assert(false, "Needs gcc or clang, to support __builtin_popcount");
#endif


// Define COUNT_BITS(x) here for each of the compilers targeted.
#if defined(__GNUC__) || defined(__clang__)
#define COUNT_BITS(x) __builtin_popcount((unsigned int) (x))
#endif

// 1 op per iteration
// This also unrolls well since each loop iteration is independent of all
// others, and can be sped up with SIMD instructions.
std::vector<int> countBits(int num) {
  std::vector<int> counts{num + 1, 0};

  for (size_t i = 0; i <= num; ++i) {
    counts[i] = COUNT_BITS(i);
  }

  return counts;
}
#+END_SRC
