* [[https://leetcode.com/problems/minimum-path-sum/][Minimum Path Sum]]

** Thoughts

- Given a =m x n= grid of *non-negative* numbers where we start traversing through the first element (top left), and end our traversal at the last element (bottom right).

- We can only move down or right at a given index.

Find the minimum cost path through this.

** Potential Solutions
  - A limited breadth first search would work here (like Dijkstra)
  - The simpler solution would involve the following observation, the only way to approach a cell is through the left element and the one above it, we can compute this row by row.
  
#+BEGIN_SRC
min_cost[r, c] = cost[r, c] + min(min_cost[r - 1][c], min_cost[r, c - 1])
#+END_SRC

The base case, of course occurs at the top and left edges of the matrix

A sample solution would look like (make no assumption about the sign of the
grid's contents)
#+BEGIN_SRC cxx
int minPathSum(std::vector<std::vector<int>> &grid) {
  // Arbitrarily return 0 for an empty grid
  if (grid.empty()) {
    return 0;
  }
  std::vector<int> minRowCost(grid[0]);

  // Compute the costs for the first row, each cell in the first row can
  // ONLY be approached by the cell to its left
  for (size_t c = 1; c < minRowCost.size(); ++c) {
    minRowCost[c] += minRowCost[c - 1];
  }

  // Now iterate over the remaining rows
  for (size_t r = 1; r < grid.size(); ++r) {
    // The ONLY way to traverse the first column, is straight down
    minRowCost[0] += grid[r][0];
    for (size_t c = 1; c < minRowCost.size(); ++c) {

      minRowCost[c] = grid[r][c] + std::min(minRowCost[c], minRowCost[c - 1]);
    }
  }

  // This contains our minimum cost
  return minRowCost.back();
}
#+END_SRC
